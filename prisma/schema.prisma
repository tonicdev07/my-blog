// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String
  password      String
  image         String?
  username      String
  bio           String?
  role          String        @default("user")
  favouriteTags Tag[]
  links         Link[]
  comments      Comment[]
  posts         Post[]
  commentLikes  CommentLike[]
  postLikes     PostLike[]
}

model Post {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  body     String
  tagsId   String[]   @db.ObjectId
  tags     Tag[]      @relation(fields: [tagsId], references: [id])
  uploaded DateTime   @default(now())
  images   Image[]
  comments Comment[]
  likes    PostLike[]
  User     User?      @relation(fields: [userId], references: [id])
  userId   String?    @db.ObjectId
}

model Link {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Image {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String @db.ObjectId
}

model Tag {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  postId String[] @db.ObjectId
  posts  Post[]   @relation(fields: [postId], references: [id])
  user   User?    @relation(fields: [userId], references: [id])
  userId String?  @db.ObjectId
}

model Comment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String        @db.ObjectId
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String        @db.ObjectId
  parent    Comment?      @relation("ParentChild", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children  Comment[]     @relation("ParentChild")
  parentId  String?       @db.ObjectId
  likes     CommentLike[]
}

model CommentLike {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String  @db.ObjectId
  userId    String  @db.ObjectId

  @@unique([userId, commentId])
}

model PostLike {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  @@unique([userId, postId])
}
